generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                @id @default(cuid())
  email         String                @unique
  password      String
  name          String
  timezone      String                @default("UTC")
  isStudent     Boolean               @default(false)
  isTeacher     Boolean               @default(false)
  isAdmin       Boolean               @default(false)
  accessExpiry  DateTime?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  familyName    String?
  givenName     String?
  auditLogs     AuditLog[]
  classMembers  ClassMember[]
  taughtClasses ClassTeacher[]
  peerCoaching1 PeerCoachingSession[] @relation("PeerStudent1")
  peerCoaching2 PeerCoachingSession[] @relation("PeerStudent2")
}

model Class {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  timezone             String                @default("Europe/Zurich")
  startDate            DateTime
  endDate              DateTime
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  classDays            ClassDay[]
  members              ClassMember[]
  teachers             ClassTeacher[]
  peerCoachingSessions PeerCoachingSession[]
  sessions             Session[]
}

model ClassTeacher {
  id         String   @id @default(cuid())
  classId    String
  teacherId  String
  isPrimary  Boolean  @default(false)
  assignedAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  teacher    User     @relation(fields: [teacherId], references: [id])

  @@unique([classId, teacherId])
}

model ClassMember {
  id       String   @id @default(cuid())
  userId   String
  classId  String
  role     String   @default("STUDENT")
  joinedAt DateTime @default(now())
  class    Class    @relation(fields: [classId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
}

model ClassDay {
  id        String   @id @default(cuid())
  classId   String
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityId   String?
  entityType String?
  metadata   String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  classId    String
  enrolledAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@unique([userId, classId])
}

model Session {
  id                   String        @id @default(cuid())
  classId              String
  title                String
  description          String?
  date                 DateTime
  startTime            String
  duration             Int
  status               SessionStatus @default(PLANNED)
  summary              String?
  materialsVisible     Boolean       @default(false)
  materialsReleaseDate DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  documents            Document[]
  recordings           Recording[]
  class                Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Document {
  id         String   @id @default(cuid())
  sessionId  String
  title      String
  fileName   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  isVisible  Boolean  @default(false)
  uploadedAt DateTime @default(now())
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Recording {
  id        String   @id @default(cuid())
  sessionId String
  title     String
  videoUrl  String
  isVisible Boolean  @default(false)
  addedAt   DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model PeerCoachingSession {
  id            String   @id @default(cuid())
  classId       String
  student1Id    String
  student2Id    String
  scheduledDate DateTime
  startTime     String
  endTime       String
  duration      Int
  status        String   @default("SCHEDULED")
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  class         Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student1      User     @relation("PeerStudent1", fields: [student1Id], references: [id])
  student2      User     @relation("PeerStudent2", fields: [student2Id], references: [id])
}

enum SessionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
